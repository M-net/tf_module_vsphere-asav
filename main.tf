
locals {
  ovf_template_path = abspath(pathexpand(var.ovf_template_path))
  ovf_template_dir  = dirname(local.ovf_template_path)
  ovf_template_file = basename(local.ovf_template_path)
  mf_template_file  = replace(local.ovf_template_file, "/ov[af]$/", "mf")
  day0_config_path  = abspath(pathexpand(var.day0_config_path))
  day0_vsphere_path = "${var.vsphere_vm_name}_day0/day0.iso"
}


data "external" "day0_generate" {
  count       = var.day0_config_path == "" ? 0 : 1
  working_dir = local.ovf_template_dir

  program = ["bash", abspath("${path.module}/day0_generate.sh")]

  query = {
    ovf_template_file = local.ovf_template_file
    mf_template_file  = local.mf_template_file
    day0_config_path  = local.day0_config_path
  }
}


data "vsphere_ovf_vm_template" "asav" {
  name                 = var.vsphere_vm_name
  deployment_option    = var.vsphere_vm_deployment_option
  disk_provisioning    = "thin"
  ip_protocol          = "IPV4"
  ip_allocation_policy = "STATIC_MANUAL"
  local_ovf_path       = local.ovf_template_path
  ovf_network_map = {
    for network in keys(var.vsphere_vm_networks) :
    network => data.vsphere_network.network[var.vsphere_vm_networks[network]].id
  }
  resource_pool_id = data.vsphere_compute_cluster.cluster.resource_pool_id
  datastore_id     = data.vsphere_datastore.datastore.id
  host_system_id   = data.vsphere_host.host.id

  depends_on = [data.external.day0_generate]
}


# Ugly workorund to make day0.iso location predictable
resource "vsphere_file" "day0" {
  datacenter         = var.vsphere_datacenter
  datastore          = var.vsphere_datastore
  source_file        = "${local.ovf_template_dir}/day0.iso"
  destination_file   = local.day0_vsphere_path
  create_directories = true
}


resource "vsphere_virtual_machine" "vm" {
  name             = var.vsphere_vm_name
  annotation       = var.vsphere_vm_annotation
  datacenter_id    = data.vsphere_datacenter.datacenter.id
  datastore_id     = data.vsphere_datastore.datastore.id
  host_system_id   = data.vsphere_host.host.id
  resource_pool_id = data.vsphere_compute_cluster.cluster.resource_pool_id
  folder           = var.vsphere_vm_folder

  num_cpus             = data.vsphere_ovf_vm_template.asav.num_cpus
  num_cores_per_socket = data.vsphere_ovf_vm_template.asav.num_cores_per_socket
  memory               = data.vsphere_ovf_vm_template.asav.memory
  guest_id             = data.vsphere_ovf_vm_template.asav.guest_id
  scsi_type            = data.vsphere_ovf_vm_template.asav.scsi_type

  wait_for_guest_net_timeout = 0
  wait_for_guest_ip_timeout  = 0

  ovf_deploy {
    allow_unverified_ssl_cert = false
    deployment_option         = data.vsphere_ovf_vm_template.asav.deployment_option
    ip_protocol               = data.vsphere_ovf_vm_template.asav.ip_protocol
    ip_allocation_policy      = data.vsphere_ovf_vm_template.asav.ip_allocation_policy
    local_ovf_path            = data.vsphere_ovf_vm_template.asav.local_ovf_path
    disk_provisioning         = data.vsphere_ovf_vm_template.asav.disk_provisioning
    ovf_network_map           = data.vsphere_ovf_vm_template.asav.ovf_network_map
  }

  dynamic "network_interface" {
    for_each = data.vsphere_ovf_vm_template.asav.ovf_network_map
    content {
      network_id = network_interface.value
    }
  }

  # Required for OVF environment variables generated by vSphere
  cdrom {
    client_device = true
  }

  # Required for day0.iso
  cdrom {
    datastore_id = data.vsphere_datastore.datastore.id
    path         = local.day0_vsphere_path
  }

  vapp {
    properties = var.vsphere_vm_vapp_properties
  }
}

